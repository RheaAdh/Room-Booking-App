services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: room-booking-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: room_booking_db
      POSTGRES_USER: roombooking
      POSTGRES_PASSWORD: roombooking123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/complete_database_setup_postgresql.sql:/docker-entrypoint-initdb.d/01-complete_database_setup_postgresql.sql
    networks:
      - room-booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U roombooking -d room_booking_db"]
      timeout: 20s
      retries: 10

  # Spring Boot Backend
  backend:
    build:
      context: ../server
      dockerfile: ../docker/Dockerfile.backend
    container_name: room-booking-backend
    restart: unless-stopped
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/room_booking_db
      SPRING_DATASOURCE_USERNAME: roombooking
      SPRING_DATASOURCE_PASSWORD: roombooking123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SERVER_PORT: 8080
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - room-booking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/customers"]
      interval: 30s
      timeout: 10s
      retries: 5

  # React Frontend
  frontend:
    build:
      context: ../web-client
      dockerfile: ../docker/Dockerfile.frontend
    container_name: room-booking-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - room-booking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:

networks:
  room-booking-network:
    driver: bridge